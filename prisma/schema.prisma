// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator fake_data_generator {
//   provider = "prisma-generator-fake-data"
// }

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector, postgis]
}

enum UserStatus {
  Active
  Inactive
  Disabled
  Blacklisted
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum RegionType {
  Country
  State
  City
  Custom
}

model User {
  id        String     @id @default(cuid())
  status    UserStatus @default(Active)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  email              String    @unique
  emailVerified      Boolean   @default(false)
  verificationToken  String?   @unique
  verificationExpiry DateTime?
  newEmail           String?

  name      String?
  firstName String?
  lastName  String?
  phone     String?

  password             String
  passwordChangeToken  String?   @unique
  passwordChangeExpiry DateTime?
  sessions             Session[]
  roles                Role[]

  addresses UserAddress[]

  tags     UserTag[]
  settings UserSetting?
}

// ** User Setting ** //

model UserSetting {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
  defaultUserRole   Role?    @relation(fields: [defaultUserRoleId], references: [id])
  defaultUserRoleId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// ** User Tag ** //

model UserTag {
  id        String   @id @default(cuid())
  name      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ** Address ** //

model Address {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  name                String?
  firstName           String?
  lastName            String?
  address1            String
  address2            String? // This can be optional as not all addresses have a second line.
  city                String
  state               String
  postalCode          String
  country             String
  phone               String?
  email               String?
  latitude            Float?
  longitude           Float?
  userAddress         UserAddress[]
  organizationAddress OrganizationAddress[]
}

// ** UserAddress ** //

model UserAddress {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  address   Address  @relation(fields: [addressId], references: [id])
  addressId String
  isDefault Boolean  @default(false)
}

// ** Session ** //

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  hashedRt       String
  hashedSn       String
  ipAddress      String?
  userAgent      String?
  expirationDate DateTime

  @@unique([userId, hashedSn], name: "unique_user_session")
}

// ** Role ** //

model Role {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  description    String?
  key            String           @unique
  users          User[]
  permissions    RolePermission[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  userSettings   UserSetting[]

  @@unique([key, organizationId], name: "unique_organization_role")
}

// ** Permission ** //

model Permission {
  id                     String                   @id @default(cuid())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  name                   String
  description            String?
  key                    String                   @unique
  rolePermissions        RolePermission[]
  organizationPermission OrganizationPermission[]
}

// ** RolePermission (Join Table) ** //

model RolePermission {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId], name: "unique_role_permission")
}

// ** OrganizationType ** // e.g HQ, Company -> Must create Organization first. At least one organization is required

model OrganizationType {
  id                    String         @id @default(cuid())
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  name                  String         @unique
  organizations         Organization[]
  ownedByOrganization   Organization?  @relation("OwnedOrganizations", fields: [ownedByOrganizationId], references: [id])
  ownedByOrganizationId String?
}

// ** Organization ** //

model Organization {
  id                   String                   @id @default(cuid())
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  name                 String
  description          String?
  organizationType     OrganizationType         @relation(fields: [organizationTypeId], references: [id])
  organizationTypeId   String
  permissions          OrganizationPermission[]
  addresses            OrganizationAddress[]
  tags                 OrganizationTag[]
  organizations        Organization[]           @relation(name: "ParentToChild")
  parentOrganizationId String?
  parentOrganization   Organization?            @relation(name: "ParentToChild", fields: [parentOrganizationId], references: [id])
  organizationTypes    OrganizationType[]       @relation("OwnedOrganizations")
  isMainOrganization   Boolean?
  roles                Role[]
  agents               Agent[]
  knowledgeBases       KnowledgeBase[]
}

// ** User Tag ** //

model OrganizationTag {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  organizations Organization[]
}

// ** OrganizationAddress ** //

model OrganizationAddress {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  address        Address      @relation(fields: [addressId], references: [id])
  addressId      String
  isDefault      Boolean      @default(false)
}

// ** OrganizationPermission (Join Table for Organization and Permission) ** //

model OrganizationPermission {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  permissionId   String
  organization   Organization @relation(fields: [organizationId], references: [id])
  permission     Permission   @relation(fields: [permissionId], references: [id])

  @@unique([organizationId, permissionId], name: "unique_organization_permission")
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  path      String
  sortOrder Int? // Optional. Larger number will be ordered first
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique()
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Files {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resourceName String
  resourceId   String
  filePath     String
  fileType     String
}

model Country {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  alpha2        String   @unique
  alpha3        String   @unique
  locales       String[] @default([])
  defaultLocale String
  languages     String[] @default([])
  emoji         String
  currencyCode  String
  continent     String
  region        String
}

model Currency {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  code           String   @unique
  name           String
  symbol         String
  exchangeRate   Float
  isBaseCurrency Boolean
}

// Agents

model Agent {
  id             String               @id @default(cuid())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  name           String
  agentType      AgentType            @relation(fields: [agentTypeId], references: [id])
  agentTypeId    String //Link to the `AgentType`
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String
  status         AgentStatus          @default(Pending)
  statusHistory  AgentStatusHistory[]
  credentials    Credential[]
  integrations   AgentIntegration[]
  Usage          Usage[]
  UsageEvent     UsageEvent[]
}

model AgentStatusHistory {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  agent          Agent        @relation(fields: [agentId], references: [id])
  agentId        String
  newStatus      AgentStatus
  previousStatus AgentStatus?
}

enum AgentStatus {
  Pending
  Active
  Inactive
}

model AgentType {
  id           String             @id @default(cuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  key          String             @unique()
  name         String
  description  String
  icon         String             @default("carbon:ai")
  status       AgentTypeStatus    @default(Preview)
  price        Int // Price in cents - Base price of the **agent itself**
  tags         String[]           @default([])
  integrations AgentIntegration[]
  Agent        Agent[]
}

enum AgentTypeStatus {
  Preview
  Active
  Disabled
}

model Integration {
  id                String             @id @default(cuid())
  name              String // e.g., "WhatsApp", "Telegram", "Web Integration"
  key               String             @unique // e.g., "whatsapp", "telegram", "web" - to identify in code
  description       String? // Optional Description
  agentIntegrations AgentIntegration[]
  usages            Usage[]
  UsageEvent        UsageEvent[]
}

model AgentIntegration {
  id            String      @id @default(cuid())
  agentType     AgentType   @relation(fields: [agentTypeId], references: [id])
  agentTypeId   String
  integration   Integration @relation(fields: [integrationId], references: [id])
  integrationId String
  price         Int // Price in cents - **Specific to the agent + integration combo**
  agent         Agent       @relation(fields: [agentId], references: [id])
  agentId       String

  @@unique([agentTypeId, integrationId]) // Prevent duplicate agent/integration combos
}

model Usage {
  id            String      @id @default(cuid())
  agent         Agent       @relation(fields: [agentId], references: [id])
  agentId       String
  integration   Integration @relation(fields: [integrationId], references: [id])
  integrationId String // To track which integration this usage is for
  units         Int         @default(0) // Number of "units" used (e.g., messages, API calls)
  cost          Int         @default(0) // Pre-calculated cost (in cents)
  startTime     DateTime    @default(now()) // Start of the usage period (e.g., start of day)
  endTime       DateTime    @default(now()) // End of the usage period (e.g., end of day)

  @@unique([agentId, integrationId, startTime, endTime]) // Ensure only one record per period+agent+integration
  @@index([agentId, integrationId, startTime, endTime]) //Index for fast query
}

model UsageEvent {
  id            String      @id @default(cuid())
  agent         Agent       @relation(fields: [agentId], references: [id])
  agentId       String
  integration   Integration @relation(fields: [integrationId], references: [id])
  integrationId String // To track which integration this usage is for
  units         Int         @default(0) // Number of "units" used (e.g., messages, API calls)
  cost          Int         @default(0) // Total cost for this usage, pre-calculated (in cents)
  createdAt     DateTime    @default(now())

  @@index([agentId, integrationId, createdAt]) // For efficient querying
}

model Credential {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  agent            Agent          @relation(fields: [agentId], references: [id])
  agentId          String
  credentialType   CredentialType @relation(fields: [credentialTypeId], references: [id])
  credentialTypeId String
  value            String // Store API keys, tokens, or credentials
}

model CredentialType {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  key         String       @unique()
  name        String
  description String
  credentials Credential[]
}

model KnowledgeBase {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  name           String
  description    String?
  entries        KnowledgeEntry[]
}

model KnowledgeEntry {
  id              String                      @id @default(cuid())
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  title           String
  content         String // Store raw text or processed data
  source          String? // URL, document, manual entry, etc.
  transcript      String?
  knowledgeBase   KnowledgeBase               @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  knowledgeBaseId String
  embedding       Unsupported("vector(1536)") // Replace 1536 with your dimension
}
